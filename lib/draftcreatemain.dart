import 'package:flutter/material.dart';
import 'package:firebase_core/firebase_core.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:flutter/services.dart'; // For Clipboard functionality
import 'firebase_options.dart'; // Make sure this file is generated by Firebase

void main() async {
  WidgetsFlutterBinding.ensureInitialized();
  await Firebase.initializeApp(options: DefaultFirebaseOptions.currentPlatform);

  // Enable Firestore offline persistence
  FirebaseFirestore.instance.settings = const Settings(persistenceEnabled: true);

  runApp(PatientSearchApp());
}

class PatientSearchApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      debugShowCheckedModeBanner: false,
      title: 'Patient Search',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: PatientSearchScreen(),
    );
  }
}

class PatientSearchScreen extends StatefulWidget {
  @override
  _PatientSearchScreenState createState() => _PatientSearchScreenState();
}

class _PatientSearchScreenState extends State<PatientSearchScreen> {
  final TextEditingController _searchController = TextEditingController();
  List<Map<String, dynamic>>? patientsData;
  String? errorMessage;

    Future<void> searchPatient() async {
    String query = _searchController.text.trim();
    if (query.isEmpty) {
      setState(() {
        errorMessage = "Please enter an ID, name, or phone number to search.";
        patientsData = null;
      });
      return;
    }

    try {
      QuerySnapshot snapshot;

      // Search by ID
      snapshot = await FirebaseFirestore.instance
          .collection('patientsdata')
          .where('id', isEqualTo: query)
          .get();

      if (snapshot.docs.isNotEmpty) {
        patientsData = snapshot.docs.map((doc) {
          // Ensure to cast to Map<String, dynamic>
          return {
            ...doc.data() as Map<String, dynamic>,
            'docId': doc.id,
          };
        }).toList();
      } else {
        // Search by fullName
        snapshot = await FirebaseFirestore.instance
            .collection('patientsdata')
            .where('fullName', isEqualTo: query)
            .get();

        if (snapshot.docs.isNotEmpty) {
          patientsData = snapshot.docs.map((doc) {
            return {
              ...doc.data() as Map<String, dynamic>,
              'docId': doc.id,
            };
          }).toList();
        } else {
          // Search by phoneNo
          snapshot = await FirebaseFirestore.instance
              .collection('patientsdata')
              .where('phoneNo', isEqualTo: query) // Keep query as string
              .get();

          if (snapshot.docs.isNotEmpty) {
            patientsData = snapshot.docs.map((doc) {
              return {
                ...doc.data() as Map<String, dynamic>,
                'docId': doc.id,
              };
            }).toList();
          } else {
            setState(() {
              errorMessage = "No results found for '$query'.";
              patientsData = null;
            });
          }
        }
      }

      // If data is found, reset the error message
      setState(() {
        errorMessage = null;
      });
    } catch (e) {
      setState(() {
        errorMessage = "Error fetching data: $e";
        patientsData = null;
      });
    }
  }


  // Function to copy the value to clipboard
  void _copyToClipboard(BuildContext context, String value, String field) {
    Clipboard.setData(ClipboardData(text: value));
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(content: Text('$field copied to clipboard')),
    );
  }

  Future<void> deletePatient(String docId) async {
    try {
      await FirebaseFirestore.instance.collection('patientsdata').doc(docId).delete();
      setState(() {
        patientsData = patientsData?.where((patient) => patient['docId'] != docId).toList();
      });
      ScaffoldMessenger.of(context).showSnackBar(SnackBar(content: Text('Patient record deleted')));
    } catch (e) {
      ScaffoldMessenger.of(context).showSnackBar(SnackBar(content: Text('Error deleting record: $e')));
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Patient Search'),
      ),
      body: SingleChildScrollView(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          children: [
            TextField(
              controller: _searchController,
              decoration: InputDecoration(
                labelText: 'Enter ID, Name, or Phone Number',
                suffixIcon: IconButton(
                  icon: Icon(Icons.search),
                  onPressed: searchPatient,
                ),
              ),
              onSubmitted: (value) => searchPatient(),
            ),
            SizedBox(height: 16.0),
            if (errorMessage != null)
              Text(
                errorMessage!,
                style: TextStyle(color: Colors.red),
              ),
            if (patientsData != null && patientsData!.isNotEmpty) ...[
              SizedBox(height: 16.0),
              Text('Search Results:', style: TextStyle(fontSize: 20)),
              ListView.builder(
                shrinkWrap: true,
                physics: NeverScrollableScrollPhysics(),
                itemCount: patientsData!.length,
                itemBuilder: (context, index) {
                  final patient = patientsData![index];
                  return Card(
                    margin: EdgeInsets.symmetric(vertical: 8),
                    elevation: 4,
                    child: ListTile(
                      title: Text(
                        patient['fullName'],
                        style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold),
                      ),
                      subtitle: Column(
                        crossAxisAlignment: CrossAxisAlignment.start,
                        children: [
                          GestureDetector(
                            onTap: () => _copyToClipboard(context, patient['id'].toString(), 'ID'),
                            child: Text('ID: ${patient['id']}', style: TextStyle(color: Colors.black, decoration: TextDecoration.underline)),
                          ),
                          GestureDetector(
                            onTap: () => _copyToClipboard(context, patient['phoneNo'].toString(), 'Phone number'),
                            child: Text('Phone: ${patient['phoneNo']}', style: TextStyle(color: Colors.black, decoration: TextDecoration.underline)),
                          ),
                          Text('Gender: ${patient['gender']}', style: TextStyle(color: Colors.black)),
                          Text('Consulted Doctors: ${patient['consultedDoctors']?.join(', ') ?? "N/A"}', style: TextStyle(color: Colors.black)),
                        ],
                      ),
                      trailing: IconButton(
                        icon: Icon(Icons.delete, color: Colors.red),
                        onPressed: () => deletePatient(patient['docId']),
                      ),
                      onTap: () {
                        Navigator.push(
                          context,
                          MaterialPageRoute(
                            builder: (context) => AddEditPatientScreen(existingPatient: patient),
                          ),
                        );
                      },
                    ),
                  );
                },
              ),
            ],
          ],
        ),
      ),
      floatingActionButton: FloatingActionButton(
        child: Icon(Icons.add),
        onPressed: () {
          Navigator.push(
            context,
            MaterialPageRoute(
              builder: (context) => AddEditPatientScreen(),
            ),
          );
        },
      ),
    );
  }
}

class AddEditPatientScreen extends StatefulWidget {
  final Map<String, dynamic>? existingPatient; // Used for editing
  const AddEditPatientScreen({Key? key, this.existingPatient}) : super(key: key);

  @override
  _AddEditPatientScreenState createState() => _AddEditPatientScreenState();
}

class _AddEditPatientScreenState extends State<AddEditPatientScreen> {
  final _formKey = GlobalKey<FormState>();
  final TextEditingController _idController = TextEditingController();
  final TextEditingController _fullNameController = TextEditingController();
  final TextEditingController _phoneController = TextEditingController();
  final TextEditingController _ageController = TextEditingController();
  String? _selectedGender;
  List<Map<String, dynamic>> _services = [];

  @override
  void initState() {
    super.initState();
    if (widget.existingPatient != null) {
      _idController.text = widget.existingPatient!['id'].toString();
      _fullNameController.text = widget.existingPatient!['fullName'];
      _phoneController.text = widget.existingPatient!['phoneNo'].toString();
      _ageController.text = widget.existingPatient!['age'].toString();
      _selectedGender = widget.existingPatient!['gender'];
      // _services = List<Map<String, dynamic>>.from(widget.existingPatient!['services'] ?? []);
      _services = List<Map<String, dynamic>>.from(widget.existingPatient?['services'] ?? []);

    }
  }

Future<void> savePatient() async {
    if (!_formKey.currentState!.validate()) return;

    final newPatientData = {
      'id': int.tryParse(_idController.text) ?? 0,
      'fullName': _fullNameController.text.trim(),
      'phoneNo': int.tryParse(_phoneController.text.trim()) ?? 0,
      'age': int.tryParse(_ageController.text.trim()) ?? 0,
      'gender': _selectedGender,
      'services': _services,
    };

    try {
      if (widget.existingPatient == null) {
        // Check if a document with the same ID already exists
        DocumentSnapshot existingDoc = await FirebaseFirestore.instance
            .collection('patientsdata')
            .doc(_idController.text)
            .get();

        if (existingDoc.exists) {
          ScaffoldMessenger.of(context).showSnackBar(SnackBar(content: Text('Patient ID already exists. Please use a different ID.')));
          return;
        }

        // Add new patient with custom ID
        await FirebaseFirestore.instance.collection('patientsdata').doc(_idController.text).set(newPatientData);
      } else {
        // Update existing patient
        String docId = widget.existingPatient!['docId'];
        await FirebaseFirestore.instance.collection('patientsdata').doc(docId).update(newPatientData);
      }
      Navigator.pop(context);
    } catch (e) {
      ScaffoldMessenger.of(context).showSnackBar(SnackBar(content: Text('Error saving data: $e')));
    }
}


  void addService() {
    showDialog(
      context: context,
      builder: (BuildContext context) {
        final TextEditingController serviceNameController = TextEditingController();
        final TextEditingController doctorController = TextEditingController();
        final TextEditingController billedController = TextEditingController();
        final TextEditingController paidController = TextEditingController();
        DateTime? serviceDate;

        return AlertDialog(
          title: Text('Add Service'),
          content: SingleChildScrollView(
            child: Column(
              children: [
                TextField(
                  controller: serviceNameController,
                  decoration: InputDecoration(labelText: 'Service Name'),
                ),
                TextField(
                  controller: doctorController,
                  decoration: InputDecoration(labelText: 'Doctor'),
                ),
                TextField(
                  controller: billedController,
                  decoration: InputDecoration(labelText: 'Billed Amount'),
                  keyboardType: TextInputType.number,
                ),
                TextField(
                  controller: paidController,
                  decoration: InputDecoration(labelText: 'Paid Amount'),
                  keyboardType: TextInputType.number,
                ),
                SizedBox(height: 16),
                ElevatedButton(
                  onPressed: () async {
                    serviceDate = await showDatePicker(
                      context: context,
                      initialDate: DateTime.now(),
                      firstDate: DateTime(2000),
                      lastDate: DateTime.now(),
                    );
                  },
                  child: Text(serviceDate == null ? 'Select Service Date' : 'Service Date: ${serviceDate!.day}/${serviceDate!.month}/${serviceDate!.year}'),
                ),
              ],
            ),
          ),
          actions: [
            TextButton(
              onPressed: () {
                Navigator.pop(context);
              },
              child: Text('Cancel'),
            ),
            TextButton(
              onPressed: () {
                if (serviceNameController.text.isNotEmpty && serviceDate != null) {
                  setState(() {
                    _services.add({
                      'serviceName': serviceNameController.text,
                      'doctor': doctorController.text,
                      'serviceDate': serviceDate,
                      'billing': {
                        'billed': int.tryParse(billedController.text) ?? 0,
                        'paid': int.tryParse(paidController.text) ?? 0,
                      }
                    });
                  });
                  Navigator.pop(context);
                }
              },
              child: Text('Add Service'),
            ),
          ],
        );
      },
    );
  }

  void editService(int index) {
    final existingService = _services[index];

    showDialog(
      context: context,
      builder: (BuildContext context) {
        final TextEditingController serviceNameController = TextEditingController(text: existingService['serviceName']);
        final TextEditingController doctorController = TextEditingController(text: existingService['doctor']);
        final TextEditingController billedController = TextEditingController(text: existingService['billing']['billed'].toString());
        final TextEditingController paidController = TextEditingController(text: existingService['billing']['paid'].toString());
        DateTime? serviceDate = existingService['serviceDate'];

        return AlertDialog(
          title: Text('Edit Service'),
          content: SingleChildScrollView(
            child: Column(
              children: [
                TextField(
                  controller: serviceNameController,
                  decoration: InputDecoration(labelText: 'Service Name'),
                ),
                TextField(
                  controller: doctorController,
                  decoration: InputDecoration(labelText: 'Doctor'),
                ),
                TextField(
                  controller: billedController,
                  decoration: InputDecoration(labelText: 'Billed Amount'),
                  keyboardType: TextInputType.number,
                ),
                TextField(
                  controller: paidController,
                  decoration: InputDecoration(labelText: 'Paid Amount'),
                  keyboardType: TextInputType.number,
                ),
                SizedBox(height: 16),
                ElevatedButton(
                  onPressed: () async {
                    serviceDate = await showDatePicker(
                      context: context,
                      initialDate: serviceDate ?? DateTime.now(),
                      firstDate: DateTime(2000),
                      lastDate: DateTime.now(),
                    );
                  },
                  child: Text(serviceDate == null ? 'Select Service Date' : 'Service Date: ${serviceDate!.day}/${serviceDate!.month}/${serviceDate!.year}'),
                ),
              ],
            ),
          ),
          actions: [
            TextButton(
              onPressed: () {
                Navigator.pop(context);
              },
              child: Text('Cancel'),
            ),
            TextButton(
              onPressed: () {
                if (serviceNameController.text.isNotEmpty && serviceDate != null) {
                  setState(() {
                    _services[index] = {
                      'serviceName': serviceNameController.text,
                      'doctor': doctorController.text,
                      'serviceDate': serviceDate,
                      'billing': {
                        'billed': int.tryParse(billedController.text) ?? 0,
                        'paid': int.tryParse(paidController.text) ?? 0,
                      }
                    };
                  });
                  Navigator.pop(context);
                }
              },
              child: Text('Save Changes'),
            ),
          ],
        );
      },
    );
  }

  void removeService(int index) {
    setState(() {
      _services.removeAt(index);
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text(widget.existingPatient == null ? 'Add Patient' : 'Edit Patient'),
      ),
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Form(
          key: _formKey,
          child: SingleChildScrollView(
            child: Column(
              children: [
                TextFormField(
                  controller: _idController,
                  decoration: InputDecoration(labelText: 'Patient ID'),
                  keyboardType: TextInputType.number,
                  validator: (value) => value!.isEmpty ? 'Please enter a valid ID' : null,
                ),
                TextFormField(
                  controller: _fullNameController,
                  decoration: InputDecoration(labelText: 'Full Name'),
                  validator: (value) => value!.isEmpty ? 'Please enter a name' : null,
                ),
                TextFormField(
                  controller: _phoneController,
                  decoration: InputDecoration(labelText: 'Phone Number'),
                  keyboardType: TextInputType.phone,
                  validator: (value) => value!.isEmpty ? 'Please enter a phone number' : null,
                ),
                TextFormField(
                  controller: _ageController,
                  decoration: InputDecoration(labelText: 'Age'),
                  keyboardType: TextInputType.number,
                  validator: (value) => value!.isEmpty ? 'Please enter the age' : null,
                ),
                DropdownButtonFormField<String>(
                  value: _selectedGender,
                  items: ['Male', 'Female', 'Other']
                      .map((gender) => DropdownMenuItem(value: gender, child: Text(gender)))
                      .toList(),
                  onChanged: (value) {
                    setState(() {
                      _selectedGender = value;
                    });
                  },
                  decoration: InputDecoration(labelText: 'Gender'),
                  validator: (value) => value == null ? 'Please select a gender' : null,
                ),
                SizedBox(height: 16),
                Text('Services:', style: TextStyle(fontSize: 18)),
                ListView.builder(
                  shrinkWrap: true,
                  physics: NeverScrollableScrollPhysics(),
                  itemCount: _services.length,
                  itemBuilder: (context, index) {
                    final service = _services[index];
                    return ListTile(
                      title: Text(service['serviceName']),
                      subtitle: Text('Doctor: ${service['doctor']}, Date: ${service['serviceDate'].day}/${service['serviceDate'].month}/${service['serviceDate'].year}'),
                      trailing: Row(
                        mainAxisSize: MainAxisSize.min,
                        children: [
                          IconButton(
                            icon: Icon(Icons.edit),
                            onPressed: () => editService(index),
                          ),
                          IconButton(
                            icon: Icon(Icons.delete),
                            onPressed: () => removeService(index),
                          ),
                        ],
                      ),
                    );
                  },
                ),
                SizedBox(height: 16),
                ElevatedButton(
                  onPressed: addService,
                  child: Text('Add Service'),
                ),
                SizedBox(height: 16),
                ElevatedButton(
                  onPressed: savePatient,
                  child: Text(widget.existingPatient == null ? 'Add Patient' : 'Save Changes'),
                ),
              ],
            ),
          ),
        ),
      ),
    );
  }
}
