import 'package:flutter/material.dart';
import 'package:firebase_core/firebase_core.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:flutter/services.dart'; // Import this for Clipboard functionality
import 'firebase_options.dart'; // Make sure this file is generated by Firebase

void main() async {
  WidgetsFlutterBinding.ensureInitialized();
  await Firebase.initializeApp(options: DefaultFirebaseOptions.currentPlatform);

  // Enable Firestore offline persistence
  FirebaseFirestore.instance.settings = Settings(persistenceEnabled: true);

  runApp(PatientSearchApp());
}

class PatientSearchApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      debugShowCheckedModeBanner: false,
      title: 'Patient Search',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: PatientSearchScreen(),
    );
  }
}

class PatientSearchScreen extends StatefulWidget {
  @override
  _PatientSearchScreenState createState() => _PatientSearchScreenState();
}

class _PatientSearchScreenState extends State<PatientSearchScreen> {
  final TextEditingController _searchController = TextEditingController();
  List<Map<String, dynamic>>? patientsData;
  String? errorMessage;

  Future<void> searchPatient() async {
    String query = _searchController.text.trim();
    if (query.isEmpty) {
      setState(() {
        errorMessage = "Please enter an ID, name, or phone number to search.";
        patientsData = null;
      });
      return;
    }

    try {
      QuerySnapshot snapshot;

      // Search by ID
      snapshot = await FirebaseFirestore.instance
          .collection('patientsdata')
          .where('id', isEqualTo: query)
          .get();

      if (snapshot.docs.isNotEmpty) {
        patientsData = snapshot.docs.map((doc) => doc.data() as Map<String, dynamic>).toList();
      } else {
        // Search by fullName
        snapshot = await FirebaseFirestore.instance
            .collection('patientsdata')
            .where('fullName', isEqualTo: query)
            .get();

        if (snapshot.docs.isNotEmpty) {
          patientsData = snapshot.docs.map((doc) => doc.data() as Map<String, dynamic>).toList();
        } else {
          // Search by phoneNo
          snapshot = await FirebaseFirestore.instance
              .collection('patientsdata')
              .where('phoneNo', isEqualTo: int.tryParse(query))
              .get();

          if (snapshot.docs.isNotEmpty) {
            patientsData = snapshot.docs.map((doc) => doc.data() as Map<String, dynamic>).toList();
          } else {
            setState(() {
              errorMessage = "No results found for '$query'.";
              patientsData = null;
            });
          }
        }
      }

      // If data is found, reset the error message
      setState(() {
        errorMessage = null;
      });
    } catch (e) {
      setState(() {
        errorMessage = "Error fetching data: $e";
        patientsData = null;
      });
    }
  }

  String _getLastVisitInfo(Timestamp? lastVisitedOn) {
    if (lastVisitedOn == null) return 'No visit record';

    DateTime lastVisitedDate = lastVisitedOn.toDate();
    DateTime now = DateTime.now();
    Duration difference = now.difference(lastVisitedDate);

    if (difference.inDays <= 45) {
      return '${difference.inDays} days ago';
    } else {
      String formattedDate = '${lastVisitedDate.day}/${lastVisitedDate.month}/${lastVisitedDate.year}';
      String formattedTime = '${lastVisitedDate.hour}:${lastVisitedDate.minute.toString().padLeft(2, '0')}';
      
      if (lastVisitedDate.hour == 0 && lastVisitedDate.minute == 0) {
        return 'Visited on: $formattedDate';
      } else {
        String amPm = lastVisitedDate.hour < 12 ? 'AM' : 'PM';
        int hourIn12 = lastVisitedDate.hour % 12;
        hourIn12 = hourIn12 == 0 ? 12 : hourIn12; // Convert 0 to 12 for 12 AM
        return 'Visited on: $formattedDate, $hourIn12:${lastVisitedDate.minute.toString().padLeft(2, '0')} $amPm';
      }
    }
  }

  // Function to copy the value to clipboard
  void _copyToClipboard(BuildContext context, String value, String field) {
    Clipboard.setData(ClipboardData(text: value));
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(content: Text('$field copied to clipboard')),
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Patient Search'),
      ),
      body: SingleChildScrollView(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          children: [
            TextField(
              controller: _searchController,
              decoration: InputDecoration(
                labelText: 'Enter ID, Name, or Phone Number',
                suffixIcon: IconButton(
                  icon: Icon(Icons.search),
                  onPressed: searchPatient,
                ),
              ),
              onSubmitted: (value) => searchPatient(),
            ),
            SizedBox(height: 16.0),
            if (errorMessage != null)
              Text(
                errorMessage!,
                style: TextStyle(color: Colors.red),
              ),
            if (patientsData != null && patientsData!.isNotEmpty) ...[
              SizedBox(height: 16.0),
              Text('Search Results:', style: TextStyle(fontSize: 20)),
              ListView.builder(
                shrinkWrap: true,
                physics: NeverScrollableScrollPhysics(),
                itemCount: patientsData!.length,
                itemBuilder: (context, index) {
                  final patient = patientsData![index];
                  return Card(
                    margin: EdgeInsets.symmetric(vertical: 8),
                    elevation: 4,
                    child: ListTile(
                      title: Text(
                        patient['fullName'],
                        style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold),
                      ),
                      subtitle: Column(
                        crossAxisAlignment: CrossAxisAlignment.start,
                        children: [
                          GestureDetector(
                            onTap: () => _copyToClipboard(context, patient['id'].toString(), 'ID'),
                            child: Text('ID: ${patient['id']}', style: TextStyle(color: Colors.black, decoration: TextDecoration.underline)),
                          ),
                          GestureDetector(
                            onTap: () => _copyToClipboard(context, patient['phoneNo'].toString(), 'Phone number'),
                            child: Text('Phone: ${patient['phoneNo']}', style: TextStyle(color: Colors.black, decoration: TextDecoration.underline)),
                          ),
                          Text('Last Visited: ${_getLastVisitInfo(patient['lastVisitedOn'])}', style: TextStyle(color: Colors.black)),
                          Text('Consulted Doctors: ${patient['consultedDoctors']?.join(', ') ?? "N/A"}', style: TextStyle(color: Colors.black)),
                        ],
                      ),
                      onTap: () {
                        Navigator.push(
                          context,
                          MaterialPageRoute(
                            builder: (context) => PatientDetailScreen(patient: patient),
                          ),
                        );
                      },
                    ),
                  );
                },
              ),
            ],
          ],
        ),
      ),
    );
  }
}

class PatientDetailScreen extends StatelessWidget {
  final Map<String, dynamic> patient;

  const PatientDetailScreen({Key? key, required this.patient}) : super(key: key);

  String _getLastVisitInfo(Timestamp? lastVisitedOn) {
    if (lastVisitedOn == null) return 'No visit record';

    DateTime lastVisitedDate = lastVisitedOn.toDate();
    DateTime now = DateTime.now();
    Duration difference = now.difference(lastVisitedDate);

    if (difference.inDays <= 45) {
      return '${difference.inDays} days ago';
    } else {
      String formattedDate = '${lastVisitedDate.day}/${lastVisitedDate.month}/${lastVisitedDate.year}';
      String formattedTime = '${lastVisitedDate.hour}:${lastVisitedDate.minute.toString().padLeft(2, '0')}';
      if (lastVisitedDate.hour == 0 && lastVisitedDate.minute == 0) {
        return 'Visited on: $formattedDate';
      } else {
        String amPm = lastVisitedDate.hour < 12 ? 'AM' : 'PM';
        int hourIn12 = lastVisitedDate.hour % 12;
        hourIn12 = hourIn12 == 0 ? 12 : hourIn12; // Convert 0 to 12 for 12 AM
        return 'Visited on: $formattedDate, $hourIn12:${lastVisitedDate.minute.toString().padLeft(2, '0')} $amPm';
      }
    }
  }

  @override
  Widget build(BuildContext context) {
    List<Map<String, dynamic>> sortedServices = [];
    if (patient['services'] != null) {
      sortedServices = List<Map<String, dynamic>>.from(
        patient['services'].entries.map((entry) => {
          'serviceName': entry.key,
          'details': entry.value,
        }),
      ).toList();

      sortedServices.sort((a, b) {
        List<Timestamp>? aTimestamps = List<Timestamp>.from(a['details']['serviceTakenOn'] ?? []);
        List<Timestamp>? bTimestamps = List<Timestamp>.from(b['details']['serviceTakenOn'] ?? []);
        if (aTimestamps.isEmpty || bTimestamps.isEmpty) return 0; // Consider equal if either list is empty
        Timestamp aTimestamp = aTimestamps.last;
        Timestamp bTimestamp = bTimestamps.last;
        return bTimestamp.compareTo(aTimestamp); // Sort descending (most recent first)
      });
    }

     return Scaffold(
    appBar: AppBar(
      title: Text('${patient['fullName']} - Details'),
      centerTitle: true,
    ),
    body: Padding(
      padding: const EdgeInsets.all(16.0),
      child: SingleChildScrollView(
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            // Patient Information Card
            Card(
              elevation: 4,
              margin: EdgeInsets.symmetric(vertical: 8),
              child: Padding(
                padding: const EdgeInsets.all(16.0),
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Text(
                      'Patient Information',
                      style: TextStyle(fontSize: 22, fontWeight: FontWeight.bold),
                    ),
                    SizedBox(height: 8),
                    GestureDetector(
                      onTap: () {
                        // Copy ID to clipboard
                        Clipboard.setData(ClipboardData(text: patient['id'].toString()));
                        ScaffoldMessenger.of(context).showSnackBar(
                          SnackBar(content: Text('ID copied to clipboard!')),
                        );
                      },
                      child: Text('ID: ${patient['id']}', style: TextStyle(fontSize: 16, color: Colors.black,decoration: TextDecoration.underline)),
                    ),
                    GestureDetector(
                      onTap: () {
                        // Copy Phone Number to clipboard
                        Clipboard.setData(ClipboardData(text: patient['phoneNo'].toString()));
                        ScaffoldMessenger.of(context).showSnackBar(
                          SnackBar(content: Text('Phone number copied to clipboard!')),
                        );
                      },
                      child: Text('Phone: ${patient['phoneNo']}', style: TextStyle(fontSize: 16, color: Colors.black,decoration: TextDecoration.underline)),
                    ),
                    Text('Full Name: ${patient['fullName']}', style: TextStyle(fontSize: 16)),
                    Text('Age: ${patient['age']}', style: TextStyle(fontSize: 16)),
                    Text('Visit Count: ${patient['visitCount']}', style: TextStyle(fontSize: 16)),
                    Text('Last Visit: ${_getLastVisitInfo(patient['lastVisitedOn'])}', style: TextStyle(fontSize: 16)),
                  ],
                ),
              ),
            ),
              // Consulted Doctors Section
              if (patient['consultedDoctors'] != null && patient['consultedDoctors'].isNotEmpty) ...[
                SizedBox(height: 16),
                Text(
                  'Consulted Doctors:',
                  style: TextStyle(fontSize: 20, fontWeight: FontWeight.bold),
                ),
                ...List.generate(patient['consultedDoctors'].length, (index) {
                  return Padding(
                    padding: const EdgeInsets.symmetric(vertical: 4),
                    child: Text(' - ${patient['consultedDoctors'][index]}', style: TextStyle(fontSize: 16)),
                  );
                }),
              ],

              // Services Section
              if (sortedServices.isNotEmpty) ...[
                SizedBox(height: 16),
                Text(
                  'Services Taken:',
                  style: TextStyle(fontSize: 22, fontWeight: FontWeight.bold),
                ),
                ListView.builder(
                  shrinkWrap: true,
                  physics: NeverScrollableScrollPhysics(),
                  itemCount: sortedServices.length,
                  itemBuilder: (context, index) {
                    final service = sortedServices[index];
                    final billingDetails = service['details']['billing_details'];
                    List<Widget> billingFields = [];

                    if (billingDetails != null) {
                      if (billingDetails['billed'] != null && billingDetails['billed'] != 0) {
                        billingFields.add(Text('Billed: ${billingDetails['billed']}', style: TextStyle(fontSize: 16)));
                      }
                      if (billingDetails['paid'] != null && billingDetails['paid'] != 0) {
                        billingFields.add(Text('Paid: ${billingDetails['paid']}', style: TextStyle(fontSize: 16)));
                      }
                      if (billingDetails['disc'] != null && billingDetails['disc'] != 0) {
                        billingFields.add(Text('Discount: ${billingDetails['disc']}', style: TextStyle(fontSize: 16)));
                      }
                      if (billingDetails['tax'] != null && billingDetails['tax'] != 0) {
                        billingFields.add(Text('Tax: ${billingDetails['tax']}', style: TextStyle(fontSize: 16)));
                      }
                      if (billingDetails['refund'] != null && billingDetails['refund'] != 0) {
                        billingFields.add(Text('Refund: ${billingDetails['refund']}', style: TextStyle(fontSize: 16)));
                      }
                      if (billingDetails['due'] != null && billingDetails['due'] != 0) {
                        billingFields.add(Text('Due: ${billingDetails['due']}', style: TextStyle(fontSize: 16)));
                      }
                      if (billingDetails['addl.disc'] != null && billingDetails['addl.disc'] != 0) {
                        billingFields.add(Text('Additional Discount: ${billingDetails['addl.disc']}', style: TextStyle(fontSize: 16)));
                      }
                      if (billingDetails['price'] != null && billingDetails['price'] != 0) {
                        billingFields.add(Text('Price: ${billingDetails['price']}', style: TextStyle(fontSize: 16)));
                      }
                    }

                    return Card(
                      elevation: 2,
                      margin: EdgeInsets.symmetric(vertical: 8),
                      child: ListTile(
                        title: Text(service['serviceName'], style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold)),
                        subtitle: Column(
                          crossAxisAlignment: CrossAxisAlignment.start,
                          children: [
                            Text(
                              'Date: ${service['details']['serviceTakenOn']?.map((timestamp) => _formatDate(timestamp))?.join(", ") ?? "N/A"}',
                              style: TextStyle(fontSize: 16),
                            ),
                            ...billingFields, // Display only non-zero billing fields
                          ],
                        ),
                      ),
                    );
                  },
                ),
              ] else 
                Padding(
                  padding: const EdgeInsets.symmetric(vertical: 8),
                  child: Text('No services found for this patient.', style: TextStyle(fontSize: 16, color: Colors.grey)),
                ),
              
            ],
          ),
        ),
      ),
    );
  }

  String _formatDate(Timestamp timestamp) {
    DateTime dateTime = timestamp.toDate();
    String formattedDate = '${dateTime.day}/${dateTime.month}/${dateTime.year}';
    String formattedTime = '${dateTime.hour}:${dateTime.minute.toString().padLeft(2, '0')}';
    return dateTime.hour == 0 && dateTime.minute == 0 ? formattedDate : '$formattedDate, $formattedTime';
  }
}
