import 'package:flutter/material.dart';
import 'package:firebase_core/firebase_core.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'firebase_options.dart'; // Make sure this file is generated by Firebase

void main() async {
  WidgetsFlutterBinding.ensureInitialized();
  await Firebase.initializeApp(options: DefaultFirebaseOptions.currentPlatform);

  // Enable Firestore offline persistence
  FirebaseFirestore.instance.settings = Settings(persistenceEnabled: true);

  runApp(PatientSearchApp());
}

class PatientSearchApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      debugShowCheckedModeBanner: false,
      title: 'Patient Search',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: PatientSearchScreen(),
    );
  }
}

class PatientSearchScreen extends StatefulWidget {
  @override
  _PatientSearchScreenState createState() => _PatientSearchScreenState();
}

class _PatientSearchScreenState extends State<PatientSearchScreen> {
  final TextEditingController _searchController = TextEditingController();
  List<Map<String, dynamic>>? patientsData;
  String? errorMessage;

  Future<void> searchPatient() async {
    String query = _searchController.text.trim();
    if (query.isEmpty) {
      setState(() {
        errorMessage = "Please enter an ID, name, or phone number to search.";
        patientsData = null;
      });
      return;
    }

    try {
      QuerySnapshot snapshot;

      // Search by ID
      snapshot = await FirebaseFirestore.instance
          .collection('patientsdata')
          .where('id', isEqualTo: query)
          .get();

      if (snapshot.docs.isNotEmpty) {
        patientsData = snapshot.docs.map((doc) => doc.data() as Map<String, dynamic>).toList();
      } else {
        // Search by fullName
        snapshot = await FirebaseFirestore.instance
            .collection('patientsdata')
            .where('fullName', isEqualTo: query)
            .get();

        if (snapshot.docs.isNotEmpty) {
          patientsData = snapshot.docs.map((doc) => doc.data() as Map<String, dynamic>).toList();
        } else {
          // Search by phoneNo
          snapshot = await FirebaseFirestore.instance
              .collection('patientsdata')
              .where('phoneNo', isEqualTo: int.tryParse(query))
              .get();

          if (snapshot.docs.isNotEmpty) {
            patientsData = snapshot.docs.map((doc) => doc.data() as Map<String, dynamic>).toList();
          } else {
            setState(() {
              errorMessage = "No results found for '$query'.";
              patientsData = null;
            });
          }
        }
      }

      // If data is found, reset the error message
      setState(() {
        errorMessage = null;
      });
    } catch (e) {
      setState(() {
        errorMessage = "Error fetching data: $e";
        patientsData = null;
      });
    }
  }

  String _getLastVisitInfo(Timestamp? lastVisitedOn) {
    if (lastVisitedOn == null) return 'No visit record';

    DateTime lastVisitedDate = lastVisitedOn.toDate();
    DateTime now = DateTime.now();
    Duration difference = now.difference(lastVisitedDate);

    if (difference.inDays <= 45) {
      return '${difference.inDays} days ago';
    } else {
      return 'Visited on: ${lastVisitedDate.toLocal()}';
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Patient Search'),
      ),
      body: SingleChildScrollView(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          children: [
            TextField(
              controller: _searchController,
              decoration: InputDecoration(
                labelText: 'Enter ID, Name, or Phone Number',
                suffixIcon: IconButton(
                  icon: Icon(Icons.search),
                  onPressed: searchPatient,
                ),
              ),
              onSubmitted: (value) => searchPatient(),
            ),
            SizedBox(height: 16.0),
            if (errorMessage != null)
              Text(
                errorMessage!,
                style: TextStyle(color: Colors.red),
              ),
            if (patientsData != null && patientsData!.isNotEmpty) ...[
              SizedBox(height: 16.0),
              Text('Search Results:', style: TextStyle(fontSize: 20)),
              ListView.builder(
                shrinkWrap: true,
                physics: NeverScrollableScrollPhysics(),
                itemCount: patientsData!.length,
                itemBuilder: (context, index) {
                  final patient = patientsData![index];
                  return ListTile(
                    title: Text(patient['fullName']),
                    subtitle: Text(
                      'ID: ${patient['id']}, Phone: ${patient['phoneNo']}, Last Visited: ${_getLastVisitInfo(patient['lastVisitedOn'])}\n'
                      'Consulted Doctors: ${patient['consultedDoctors']?.join(', ') ?? "N/A"}',
                    ),
                    onTap: () {
                      Navigator.push(
                        context,
                        MaterialPageRoute(
                          builder: (context) => PatientDetailScreen(patient: patient),
                        ),
                      );
                    },
                  );
                },
              ),
            ],
          ],
        ),
      ),
    );
  }
}

class PatientDetailScreen extends StatelessWidget {
  final Map<String, dynamic> patient;

  const PatientDetailScreen({Key? key, required this.patient}) : super(key: key);

  String _getLastVisitInfo(Timestamp? lastVisitedOn) {
    if (lastVisitedOn == null) return 'No visit record';

    DateTime lastVisitedDate = lastVisitedOn.toDate();
    DateTime now = DateTime.now();
    Duration difference = now.difference(lastVisitedDate);

    if (difference.inDays <= 45) {
      return '${difference.inDays} days ago';
    } else {
      return 'Visited on: ${lastVisitedDate.toLocal()}';
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('${patient['fullName']} - Details'),
      ),
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: SingleChildScrollView(
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              Text('ID: ${patient['id']}'),
              Text('Name: ${patient['fullName']}'),
              Text('Age: ${patient['age']}'),
              Text('Gender: ${patient['gender']}'),
              Text('Phone No: ${patient['phoneNo']}'),
              Text('Last Visited: ${_getLastVisitInfo(patient['lastVisitedOn'])}'),
              Text('Visit Count: ${patient['visitCount']}'),

              // Display services and their serviceTakenOn
              Text('Services:', style: TextStyle(fontSize: 18)),
              if (patient['services'] != null) ...[
                for (var service in patient['services'].entries) ...[
                  Text('Service: ${service.key}'),
                  Text('Doctor: ${service.value['doctor']}'),

                  // Display serviceTakenOn for this service
                  Text('Service Taken On:', style: TextStyle(fontSize: 16)),
                  if (service.value['serviceTakenOn'] != null) ...[
                    for (var date in service.value['serviceTakenOn'])
                      Padding(
                        padding: const EdgeInsets.symmetric(vertical: 4.0),
                        child: Text(
                          'Date: ${date.toDate().toLocal()}',
                        ),
                      ),
                  ],
                ],
              ],
            ],
          ),
        ),
      ),
    );
  }
}
